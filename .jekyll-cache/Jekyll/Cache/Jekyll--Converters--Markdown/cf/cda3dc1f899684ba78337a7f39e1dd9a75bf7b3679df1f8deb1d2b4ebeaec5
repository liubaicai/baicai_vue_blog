I"≥c<div class="entry-content">

<strong>Change Log</strong>:
<ol>
	<li>September 29, 2013: bootstrap 3, jQuery, css</li>
	<li>November 21, 2013: added the ability to edit posts, demonstarted how to escape HTML</li>
	<li>May 4, 2014: added a captcha to the new post form to help prevent spam (see blog post <a href="http://mherman.org/blog/2014/05/04/adding-a-captcha-to-sinatra-to-minimize-spam/">here</a>)</li>
</ol>
&nbsp;

Know a little Ruby? Ready to start web development? Before jumping to Rails, get your hands dirty with Sinatra. It‚Äôs the perfect learning tool. My recommendation: Start with a basic dynamic website, backed with SQLite. Create and manage your database tables with raw SQL. Practice deploying on Heroku. Practice.

Once you feel good, add another step. Perhaps switch to DataMapper or ActiveRecord for managing your database with objects. Add a more complex database, such as PostgreSQL.

Finally, get familiar with front-end. Start with Bootstrap. Play around with JavaScript.
<h2>In this tutorial ‚Ä¶&lt;/h2&gt;
‚Ä¶ we‚Äôll be hitting the middle ground. You‚Äôll be creating a basic blog app. Before you yawn and move on, we will be using some awesome tools/gems for rapid development:
<ul>
	<li><strong>Sinatra</strong>: the web framework, of course</li>
	<li><strong>PostgreSQL</strong>: the database management system</li>
	<li><strong>ActiveRecord</strong>: the ORM</li>
	<li><strong>sinatra-activerecord</strong>: ports ActiveRecord for Sinatra</li>
	<li><strong>Tux</strong>: provides a Shell for Sinatra so we can interact with our application</li>
</ul>
<blockquote>This tutorial assumes you are running a Unix-based environment - e.g, Mac OSX, straight Linux, or Linux VM through Windows. I will also be using Sublime 2 as my text editor.</blockquote>
<h3>Let‚Äôs get Sinatra singing!</h3>
<h2>Getting started</h2>
<h3>Start by creating a project directory somewhere on your file system:</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:default decode:true">$ mkdir sinatra-blog</pre>
</div>
</figure>
<h3>Setup your gems using a Gemfile. Create the following <em>Gemfile</em> (no extension) within your main directory:</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:default decode:true"># Gemfile

source 'https://rubygems.org'
ruby "2.0.0"

gem "sinatra"
gem "activerecord"
gem "sinatra-activerecord"
gem 'sinatra-flash'
gem 'sinatra-redirect-with-flash'

group :development do
 gem 'sqlite3'
 gem "tux"
end

group :production do
 gem 'pg'
end</pre>
</div>
</figure>Notice how we‚Äôre using SQLite3 for our development environment and PostgreSQL for production, in order to simply the dev process.
<h3>Install the gems:</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:default decode:true">$ bundle install</pre>
</div>
</figure>This will create <em>Gemfile.lock</em>, displaying the exact versions of each gem that were installed.
<h3>Create a <em>config.ru</em> file, which is a standard convention that Heroku looks for.</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:ruby decode:true"># config.ru

require './app'
run Sinatra::Application</pre>
</div>
</figure>
<h2>Model</h2>
<h3>Create a file called <em>environments.rb</em> and include the following code for our database configuration:</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:ruby decode:true">configure :development do
 set :database, 'sqlite:///dev.db'
 set :show_exceptions, true
end

configure :production do
 db = URI.parse(ENV['DATABASE_URL'] || 'postgres:///localhost/mydb')

 ActiveRecord::Base.establish_connection(
   :adapter  =&gt; db.scheme == 'postgres' ? 'postgresql' : db.scheme,
   :host     =&gt; db.host,
   :username =&gt; db.user,
   :password =&gt; db.password,
   :database =&gt; db.path[1..-1],
   :encoding =&gt; 'utf8'
 )
end</pre>
</div>
</figure>
<h3>Next, create the main application file, ‚Äúapp.rb‚Äù. Make sure to include the required gems and the <em>environments.rb</em> file we just created.</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:ruby decode:true"># app.rb

require 'sinatra'
require 'sinatra/activerecord'
require './environments'


class Post &lt; ActiveRecord::Base
end</pre>
</div>
</figure>
<h3>Create a <em>Rakefile</em> (again, no extension) so we can use migrations for setting up the data model:</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:ruby decode:true"># Rakefile

require './app'
require 'sinatra/activerecord/rake'</pre>
</div>
</figure>
<h3>Now run the following command to setup the migration files:</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:default decode:true">$ rake db:create_migration NAME=create_posts</pre>
</div>
</figure>If you look at your project structure. You‚Äôll see a new folder called ‚Äúdb‚Äù and within that folder another folder called ‚Äúmigrate.‚Äù You should then see a Ruby script with a timestamp. This is a migration file. The timestamp tells ActiveRecord the order in which to apply the migrations in case there is more than one file.
<h3>Essentially, these migration files are used for setting up your database tables. Edit the file now.</h3>
<blockquote>The up method is used when we complete the migration (<code>rake db:migrate</code>), while the down method is ran when we rollback the last migration (<code>rake db:rollback</code>).</blockquote>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:ruby decode:true">class CreatePosts &lt; ActiveRecord::Migration
 def self.up
   create_table :posts do |t|
     t.string :title
     t.text :body
     t.timestamps
   end
 end

 def self.down
   drop_table :posts
 end
end</pre>
</div>
</figure>
<h3>Run the migration</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:default decode:true">$ rake db:migrate</pre>
</div>
</figure>Just so you know, ActiveRecord created these table columns: <code>id</code>, <code>title</code>, <code>body</code>, <code>created_at</code>, <code>updated_at</code>

When you create a new post, you only need to specify the title and body; the remaining fields are generated automatically with ActiveRecord‚Äôs magic! Pretty cool, eh?
<h3>Use tux in order to add some data to the database.</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:default decode:true">$ tux
&gt;&gt; Post.create(title: 'Testing the title', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum venenatis eros eget lectus hendrerit, sed mattis quam pretium. Aenean accumsan eget leo non cursus. Aliquam sagittis luctus mi, quis suscipit neque venenatis et. Pellentesque vitae elementum diam. Quisque iaculis eget neque mattis fermentum. Donec et luctus eros. Suspendisse egestas pharetra elit vel bibendum.')
&gt;&gt;
&gt;&gt; Post.all
D, [2013-06-08T12:26:44.929333 #42914] DEBUG -- :   Post Load (0.2ms)  SELECT "posts".* FROM "posts"
=&gt; [#&lt;Post id: 1, title: "Testing the title", body: "Lorem ipsum dolor sit amet, consectetur adipiscing ...", created_at: "2013-06-08 12:24:12", updated_at: "2013-06-08 12:24:12"&gt;]</pre>
</div>
</figure>Did you notice the actual SQL syntax used for each command? No? Look again.

Add a few more posts. Then exit:

<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:default decode:true">&gt;&gt;&gt; exit</pre>
</div>
</figure>
<h2>Version Control</h2>
<h3>Before moving on, let‚Äôs get this app under version control.</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:default decode:true">$ git init
$ git add .
$ git commit -am "initial commit"</pre>
</div>
</figure>
<h2>Templates and views</h2>
<h3>Add the following code to <em>app.rb</em> to setup the first route:</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:ruby decode:true">get "/" do
  @posts = Post.order("created_at DESC")
  @title = "Welcome."
  erb :"posts/index"
end</pre>
</div>
</figure>This maps the <code>/</code> url to the template <em>index.html</em> (or <em>index.erb</em> in Ruby terms), found in ‚Äú&quot;views/posts/‚Äù directory.
<blockquote>Note: The <em>app.rb</em> file is the controller in MVC-style architecture.</blockquote>
Add the helper for the title variable:

<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:ruby decode:true">helpers do
  def title
    if @title
      "#{@title}"
    else
      "Welcome."
    end
  end
end</pre>
</div>
</figure>Fire up the dev server:

<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:default decode:true">$ ruby app.rb</pre>
</div>
</figure>Then navigate to <a href="http://localhost:4567/">http://localhost:4567/</a>. You should see an error indicating the template can‚Äôt be found - ‚Äú/sinatra-blog/views/posts/index.erb‚Äù. In other words, the URL routing is working; we just need to set up a template.

First create two new directories - ‚Äúviews/posts‚Äù ‚Ä¶
<h3>Now, setup the associated template called <em>index.erb</em>:</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:default decode:true">&lt;ul&gt;
&lt;% @posts.each do |post| %&gt;
 &lt;li&gt;
   &lt;h4&gt;&lt;a href="/posts/&lt;%= post.id %&gt;"&gt;&lt;%= post.title %&gt;&lt;/a&gt;&lt;/h4&gt;
   &lt;p&gt;Created: &lt;%= post.created_at %&gt;&lt;/p&gt;
 &lt;/li&gt;
&lt;% end %&gt;
&lt;/ul&gt;</pre>
</div>
</figure>Save this file within the ‚Äúposts‚Äù directory.
<h3>Now set up the <em>layout.erb</em> template, which is used as the parent template for all other templates. This is just a convention used to speed up development. Child templates, such as <em>index.erb</em> inherent the HTML and CSS (common code) from the parent template.</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:xhtml decode:true">&lt;html&gt;
&lt;head&gt;
 &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
 &lt;ul&gt;
   &lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;&lt;a href="/posts/create"&gt;New Post&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;%= yield %&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
</div>
</figure>Save this file within the ‚Äúviews‚Äù directory.
<blockquote>The yield method indicates where templates are embedded.</blockquote>
<h3>Kill the server. Fire it back up. Go back to <a href="http://localhost:4567/">http://localhost:4567/</a>. Refresh. You should see your basic blog. Click on a link for one of the posts. Since we don‚Äôt have a route associated with that URL, Sinatra gives us a little suggestion.</h3>
<h3>Route and template for viewing each post.</h3>
Route:

<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:ruby decode:true">get "/posts/:id" do
 @post = Post.find(params[:id])
 @title = @post.title
 erb :"posts/view"
end</pre>
</div>
</figure>Template (called <em>view.erb</em>):

<figure class="code">
<div class="highlight">
<pre class="lang:xhtml decode:true">&lt;h1&gt;&lt;%= @post.title %&gt;&lt;/h1&gt;
&lt;p&gt;&lt;%= @post.body %&gt;&lt;/p&gt;</pre>
</div>
</figure>
<h3>Route and template for adding new posts.</h3>
Route:

<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:ruby decode:true">get "/posts/create" do
 @title = "Create post"
 @post = Post.new
 erb :"posts/create"
end</pre>
</div>
</figure>Template (called <em>create.erb</em>):

<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:xhtml decode:true">&lt;h2&gt;Create Post&lt;/h2&gt;
&lt;br/&gt;
&lt;form action="/posts" method="post"role="form"&gt;
 &lt;div class="form-group"&gt;
   &lt;label for="post_title"&gt;Title:&lt;/label&gt;
   &lt;br&gt;
   &lt;input id="post_title" class="form-control" name="post[title]" type="text" value="&lt;%= @post.title %&gt;" style="width=90%"/&gt;
 &lt;/div&gt;
 &lt;div class="form-group"&gt;
   &lt;label for="post_body"&gt;Body:&lt;/label&gt;
   &lt;br&gt;
   &lt;textarea id="post_body" name="post[body]" class="form-control" rows="10"&gt;&lt;%= @post.body %&gt;&lt;/textarea&gt;
 &lt;/div&gt;
 &lt;button type="submit" class="btn btn-success"&gt;Submit&lt;/button&gt;
&lt;/form&gt;</pre>
</div>
</figure>
<h3>We also need a route for handling the POST requests.</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:ruby decode:true">post "/posts" do
 @post = Post.new(params[:post])
 if @post.save
   redirect "posts/#{@post.id}"
 else
   erb :"posts/create"
 end
end</pre>
</div>
</figure>
<h3>Test this out. Did it work? If you get this error ‚ÄúCouldn‚Äôt find Post with ID=new‚Äù you need to put the last two routes above the route for viewing each post:</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:ruby decode:true"># app.rb

require 'sinatra'
require 'sinatra/activerecord'
require './environments'


class Post &lt; ActiveRecord::Base
end

get "/" do
  @posts = Post.order("created_at DESC")
  @title = "Welcome."
  erb :"posts/index"
end

helpers do
  def title
    if @title
      "#{@title}"
    else
      "Welcome."
    end
  end
end

get "/posts/create" do
 @title = "Create post"
 @post = Post.new
 erb :"posts/create"
end

post "/posts" do
 @post = Post.new(params[:post])
 if @post.save
   redirect "posts/#{@post.id}"
 else
   erb :"posts/create"
 end
end

get "/posts/:id" do
 @post = Post.find(params[:id])
 @title = @post.title
 erb :"posts/view"
end</pre>
</div>
</figure>
<h2>Validation and Flash Messages</h2>
<h3>Add some basic validation to <em>app.rb</em>:</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:ruby decode:true">class Post &lt; ActiveRecord::Base
 validates :title, presence: true, length: { minimum: 5 }
 validates :body, presence: true
end</pre>
</div>
</figure>So, both the title and body cannot be null, and the title has to be at least 5 characters long.
<h3>Navigate to <a href="http://localhost:4567/posts/create">http://localhost:4567/posts/create</a>. Try to submit a blank post and then submit a real one. It‚Äôs a bit confusing to the user when a blank post is submitted and nothing happens, so add some messages indicating that an error has occurred.</h3>
<h3>First, add this to the top of <em>app.rb</em>:</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:ruby decode:true">require 'sinatra/flash'
require 'sinatra/redirect_with_flash'

enable :sessions</pre>
</div>
</figure>
<h3>Update the POST request route:</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:ruby decode:true">post "/posts" do
 @post = Post.new(params[:post])
 if @post.save
   redirect "posts/#{@post.id}", :notice =&gt; 'Congrats! Love the new post. (This message will disappear in 4 seconds.)'
 else
   redirect "posts/create", :error =&gt; 'Something went wrong. Try again. (This message will disappear in 4 seconds.)'
 end
end</pre>
</div>
</figure>
<h3>Add the following code to the <em>layout.erb</em> template just above the yield method:</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:xhtml decode:true">&lt;% if flash[:notice] %&gt;
 &lt;p class="alert alert-success"&gt;&lt;%= flash[:notice] %&gt;
&lt;% end %&gt;
&lt;% if flash[:error] %&gt;
 &lt;p class="alert alert-error"&gt;&lt;%= flash[:error] %&gt;
&lt;% end %&gt;</pre>
</div>
</figure>Now test it again!
<h2>Styles</h2>
The app is ugly. Add some quick bootstrap styling.
<h3>Updated <em>layout.erb</em>:</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:xhtml decode:true">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;meta name="description" content=""&gt;
    &lt;meta name="author" content=""&gt;
    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;
    &lt;link href="http://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css" rel="stylesheet"&gt;
    &lt;style&gt;
      body {
        padding-top: 75px;
      }
      .starter-template {
        padding: 40px 15px;
        text-align: center;
      }
      .container {
        max-width:1000px;
      }
    &lt;/style&gt;
  &lt;/head&gt;

  &lt;body&gt;

    &lt;div class="navbar navbar-inverse navbar-fixed-top"&gt;
      &lt;div class="container"&gt;
        &lt;div class="navbar-header"&gt;
          &lt;button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse"&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
          &lt;/button&gt;
          &lt;a class="navbar-brand" href="/"&gt;Sinatra Sings&lt;/a&gt;
        &lt;/div&gt;
        &lt;div class="collapse navbar-collapse"&gt;
          &lt;ul class="nav navbar-nav"&gt;
            &lt;li class="active"&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="/posts/create"&gt;New Post&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;&lt;!--/.nav-collapse --&gt;
      &lt;/div&gt;
    &lt;/div&gt;


    &lt;div class="container"&gt;

      &lt;% if flash[:notice] %&gt;
        &lt;p class="alert alert-success"&gt;&lt;%= flash[:notice] %&gt;
      &lt;% end %&gt;
      &lt;% if flash[:error] %&gt;
        &lt;p class="alert alert-warning"&gt;&lt;%= flash[:error] %&gt;
      &lt;% end %&gt;
      &lt;%= yield %&gt;

    &lt;/div&gt;&lt;!-- /.container --&gt;


    &lt;!-- Bootstrap core JavaScript
    ================================================== --&gt;
    &lt;!-- Placed at the end of the document so the pages load faster --&gt;
    &lt;script src="http://code.jquery.com/jquery-1.10.2.min.js"&gt;&lt;/script&gt;
    &lt;script src="http://getbootstrap.com/dist/js/bootstrap.min.js"&gt;&lt;/script&gt;
    &lt;script&gt;
    //** removes alerts after 4 seconds */
    window.setTimeout(function() {
        $(".alert").fadeTo(4500, 0).slideUp(500, function(){
            $(this).remove();
        });
    }, 4000);
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>
</div>
</figure>Looking good? Well, a little better.

<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:default decode:true">$ git add .
$ git commit -am "updated"</pre>
</div>
</figure>
<h2>Edit Posts</h2>
Alright. We need to be able to edit live posts.
<h3>Update app.rb</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:ruby decode:true"># app.rb

require 'sinatra'
require 'sinatra/activerecord'
require './environments'
require 'sinatra/flash'
require 'sinatra/redirect_with_flash'

enable :sessions


class Post &lt; ActiveRecord::Base
  validates :title, presence: true, length: { minimum: 5 }
  validates :body, presence: true
end

helpers do
  def title
    if @title
      "#{@title}"
    else
      "Welcome."
    end
  end
end

# get ALL posts
get "/" do
  @posts = Post.order("created_at DESC")
  @title = "Welcome."
  erb :"posts/index"
end

# create new post
get "/posts/create" do
  @title = "Create post"
  @post = Post.new
  erb :"posts/create"
end
post "/posts" do
  @post = Post.new(params[:post])
  if @post.save
    redirect "posts/#{@post.id}", :notice =&gt; 'Congrats! Love the new post. (This message will disapear in 4 seconds.)'
  else
    redirect "posts/create", :error =&gt; 'Something went wrong. Try again. (This message will disapear in 4 seconds.)'
  end
end

# view post
get "/posts/:id" do
  @post = Post.find(params[:id])
  @title = @post.title
  erb :"posts/view"
end

# edit post
get "/posts/:id/edit" do
  @post = Post.find(params[:id])
  @title = "Edit Form"
  erb :"posts/edit"
end
put "/posts/:id" do
  @post = Post.find(params[:id])
  @post.update(params[:post])
  redirect "/posts/#{@post.id}"
end</pre>
</div>
</figure>
<h3>Add an edit template</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:ruby decode:true">&lt;h2&gt;Edit Post&lt;/h2&gt;
&lt;br/&gt;
&lt;form action="/posts/&lt;%= @post.id %&gt;" method="post"&gt;
 &lt;div class="form-group"&gt;
  &lt;input type="hidden" name="_method" value="put" /&gt;
  &lt;label for="post_title"&gt;Title:&lt;/label&gt;
  &lt;br&gt;
  &lt;input id="post_title" class="form-control" name="post[title]" type="text" value="&lt;%= @post.title %&gt;" /&gt;
 &lt;/div&gt;
 &lt;div class="form-group"&gt;
  &lt;label for="post_body"&gt;Body:&lt;/label&gt;
  &lt;br&gt;
  &lt;textarea id="post_body" name="post[body]" class="form-control" rows="5"&gt;&lt;%= @post.body %&gt;&lt;/textarea&gt;
 &lt;/div&gt;
  &lt;button type="submit" class="btn btn-success"&gt;Submit&lt;/button&gt;
&lt;/form&gt;</pre>
</div>
</figure>
<h3>Update the view template</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:xhtml decode:true">&lt;h1&gt;&lt;%= @post.title %&gt;&lt;/h1&gt;
&lt;p&gt;&lt;%= @post.body %&gt;&lt;/p&gt;
&lt;br&gt;
&lt;a href="/posts/&lt;%= @post.id %&gt;/edit"&gt;Edit Post&lt;/a&gt;</pre>
</div>
</figure>
<h2>Test and Commit to Git</h2>
Yes, test to ensure you can edit posts locally, then add and commit to Git.
<h2>Properly Escaping</h2>
Currently, you can enter really anything into the input boxes for the title and body, including HTML. Test this out. Enter these code snippets in the title and/or or body:
<ol>
	<li><code>&lt;strong&gt;Very, very strong&lt;/strong&gt;</code></li>
	<li><code>&lt;script&gt;alert('happy birthday');&lt;/script&gt;</code></li>
</ol>
See the issue? We need to escape the text properly in order to avoid this.
<h3>Update app.rb</h3>
Add the following helper:

<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:ruby decode:true">helpers do
  include Rack::Utils
  alias_method :h, :escape_html
end</pre>
</div>
</figure>
<h3>Update the view template</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:xhtml decode:true">&lt;h1&gt;&lt;%=h @post.title %&gt;&lt;/h1&gt;
&lt;p&gt;&lt;%=h @post.body %&gt;&lt;/p&gt;
&lt;br&gt;
&lt;a href="/posts/&lt;%= @post.id %&gt;/edit"&gt;Edit Post&lt;/a&gt;</pre>
</div>
</figure>
<h3>Update the edit template</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:xhtml decode:true">&lt;h2&gt;Edit Post&lt;/h2&gt;
&lt;br/&gt;
&lt;form action="/posts/&lt;%= @post.id %&gt;" method="post"&gt;
 &lt;div class="form-group"&gt;
  &lt;input type="hidden" name="_method" value="put" /&gt;
  &lt;label for="post_title"&gt;Title:&lt;/label&gt;
  &lt;br&gt;
  &lt;input id="post_title" class="form-control" name="post[title]" type="text" value="&lt;%=h @post.title %&gt;" /&gt;
 &lt;/div&gt;
 &lt;div class="form-group"&gt;
  &lt;label for="post_body"&gt;Body:&lt;/label&gt;
  &lt;br&gt;
  &lt;textarea id="post_body" name="post[body]" class="form-control" rows="5"&gt;&lt;%=h @post.body %&gt;&lt;/textarea&gt;
 &lt;/div&gt;
  &lt;button type="submit" class="btn btn-success"&gt;Submit&lt;/button&gt;
&lt;/form&gt;</pre>
</div>
</figure>
<h3>Update the index template</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:xhtml decode:true">&lt;ul&gt;
&lt;% @posts.each do |post| %&gt;
 &lt;li&gt;
   &lt;h4&gt;&lt;a href="/posts/&lt;%= post.id %&gt;"&gt;&lt;%=h post.title %&gt;&lt;/a&gt;&lt;/h4&gt;
   &lt;p&gt;Created: &lt;%=h post.created_at %&gt;&lt;/p&gt;
 &lt;/li&gt;
&lt;% end %&gt;
&lt;/ul&gt;</pre>
</div>
</figure>Now try to enter <code>&lt;strong&gt;Very, very strong&lt;/strong&gt;</code>. Notice the difference? See <a href="http://www.sinatrarb.com/faq.html#escape_html">this</a> page for further explanation.

Commit to Git again.
<h2>Deploy</h2>
Finally, let‚Äôs get this app live on Heroku!
<h3>Create an account on Heroku. (if needed)</h3>
<h3>Install the gem - <code>sudo gem install heroku</code> (if needed)</h3>
<h3>Generate an SSH key. (if needed)</h3>
<h3>Push to Heroku:</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:default decode:true">$ heroku create &lt;my-app-name&gt;.
$ git push heroku master</pre>
</div>
</figure>
<h3>Rake the remote database:</h3>
<figure class="code"><figcaption></figcaption>
<div class="highlight">
<pre class="lang:default decode:true  ">$ heroku rake db:migrate</pre>
</div>
</figure>
<h3>Boom! Check out your live app.</h3>
Links:
<ul>
	<li>My app: <a href="http://sinatra-sings.herokuapp.com/">http://sinatra-sings.herokuapp.com/</a></li>
	<li>Git Repo: <a href="https://github.com/mjhea0/sinatra-blog">https://github.com/mjhea0/sinatra-blog</a></li>
</ul>
<em>Sinatra has ended his set (crowd applauds as he exits the main stage).</em>
<h2>Add a captcha</h2>
Help elimiante spam by adding a captcha to the new post form. View the blog post - <a href="http://mherman.org/blog/2014/05/04/adding-a-captcha-to-sinatra-to-minimize-spam/">Adding a Captcha to Sinatra to Minimize Spam</a>.

&lt;/div&gt;
</h2></div>
:ET