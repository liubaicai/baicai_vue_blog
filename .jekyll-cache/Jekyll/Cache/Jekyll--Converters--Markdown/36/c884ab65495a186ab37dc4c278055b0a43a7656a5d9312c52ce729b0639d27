I"x<p>App Servcies允许App不在前台运行的情况下提供出一个或多个对外服务供其他App使用，这看起来就好像Web开发中的Web Api。</p>

<p>通过对外提供服务的形式，可以使App更好的完成一些其他App所拥有的专业性操作，而不必自己再去实现服务所做的操作。一些企业用户可以提供复杂的服务，比如云识别和云存储来供开发者使用。这样使开发成本大大降低，也可以为服务提供商带来更多的用户。比如我们可以调用二维码识别服务，将图片转送到二维码识别服务中，然后服务返回我们需要的数据展示给用户，然后用户的一些云数据也可以使用云数据服务方便的进行云数据操作等……</p>

<p>https://msdn.microsoft.com/library/windows/apps/xaml/windows.applicationmodel.appservice.aspx</p>

<p>首先我们先创建一个App Service，App Service是运行在后台任务中的，所以我们需要在后台任务中创建。新建一个类集成后台任务：</p>
<pre class="lang:c# decode:true"> 	public sealed class AppServiceTask : IBackgroundTask
    {
        private static BackgroundTaskDeferral _serviceDeferral;
        public void Run(IBackgroundTaskInstance taskInstance)
        {
            //订阅关闭事件
            taskInstance.Canceled += TaskInstance_Canceled;
 
            _serviceDeferral = taskInstance.GetDeferral();
 
            var appService = taskInstance.TriggerDetails as AppServiceTriggerDetails;
            //验证调用者
            if (appService.Name == "appServiceUWP-calculate" &amp;&amp; appService.Name != null)
            {
                //订阅调用者请求
                appService.AppServiceConnection.RequestReceived += AppServiceConnection_RequestReceived;
            }
        }
    }</pre>
<p>通过获取后台任务参数的TriggerDetails 属性来转换为AppServiceTriggerDetails对象，然后验证下调用者的身份，可以使用加密验证也可以使用秘钥验证，这里使用字符串简单验证下，如果通过验证则订阅调用者对服务的请求事件，事件中处理调用者的请求逻辑如下：</p>
<pre class="lang:c# decode:true">		private async void AppServiceConnection_RequestReceived(AppServiceConnection sender, AppServiceRequestReceivedEventArgs args)
        {
            var message = args.Request.Message;
            string command = message["Command"] as string;
            switch (command)
            {
                case "CalcSum":
                    var messageDeferral = args.GetDeferral();
                    int value1 = (int)message["Value1"];
                    int value2 = (int)message["Value2"];
                    var returnMessage = new ValueSet();
                    returnMessage.Add("Rusult", value1 + value2);
                    //回应调用者
                    var responseStatus = await args.Request.SendResponseAsync(returnMessage);
                    messageDeferral.Complete();
                    break;
                case "Quit":
                    _serviceDeferral.Complete();
                    break;
            }
        }</pre>
<p>和App To App 服务一样，App Service中传递的数据也是ValueSet类型，我们获取到操作指令Command的值，然后选择怎么处理该任务，处理结果通过SendResponseAsync()方法将包含数据的ValueSet发送到调用方。
至此，逻辑代码已完成，然后我们需要在App Services的提供方App中声明该App Service，打开Package.appxmanifest文件，声明App Service如下：</p>

<p><a href="http://www.liubaicai.net/wp-content/uploads/2015/11/070415_0927_UWPWin103.png"><img class="alignnone size-medium wp-image-482" src="http://www.liubaicai.net/wp-content/uploads/2015/11/070415_0927_UWPWin103-300x244.png" alt="070415_0927_UWPWin103" width="300" height="244" /></a></p>

<p>在这里我们可以声明很多个AppService，格式类似上面。
Extension.Category设置为appService类型，EntryPoint设置为App Service类的NameSpace.ClassName，AppService.Name设置你的服务的名字，要保证这个名字是唯一的，调用者需要知道这个名字，正式环境下，可以把这个名字存储到UWP的公共存储空间中，使所有App都能访问到。
至此，服务端code已经完成，下面我们创建一个新项目作为调用方Client。首先我们在界面上放置两个文本框和一个按钮如下图：</p>

<p><a href="http://www.liubaicai.net/wp-content/uploads/2015/11/070415_0927_UWPWin104.png"><img class="alignnone size-medium wp-image-483" src="http://www.liubaicai.net/wp-content/uploads/2015/11/070415_0927_UWPWin104-300x83.png" alt="070415_0927_UWPWin104" width="300" height="83" /></a></p>
<pre class="lang:c# decode:true ">	public sealed partial class MainPage : Page
    {
        //声明一个AppService连接对象
        private readonly AppServiceConnection connection = new AppServiceConnection
        {
            AppServiceName = "appServiceUWP-calculate",
            PackageFamilyName = "b8df40a7-e5b3-46a2-a65a-28f502255fc5_md3s7cn435nw2"
        };
 
        public MainPage()
        {
            this.InitializeComponent();
            this.Loaded += MainPage_Loaded;
        }
 
        private async void MainPage_Loaded(object sender, RoutedEventArgs e)
        {
 
            var connectionStatus = await connection.OpenAsync();
            if (connectionStatus == AppServiceConnectionStatus.Success)
            {
                //订阅双向通信
                connection.RequestReceived += Connection_RequestReceived;
            }
            else
            {
                //可以提示并导航到商店 让用户下载该服务
                await new MessageDialog("服务连接不成功&quot;).ShowAsync();
            }
        }
 
        private void Connection_RequestReceived(AppServiceConnection sender, AppServiceRequestReceivedEventArgs args)
        {
            // To do something
        }
 
        private async void Button_Click(object sender, RoutedEventArgs e)
        {
            var message = new ValueSet();
            message.Add("Command", "CalcSum");
            message.Add("Value1", int.Parse(tbNum1.Text));
            message.Add("Value2", int.Parse(tbNum2.Text));
 
            AppServiceResponse response = await connection.SendMessageAsync(message);
            if (response.Status == AppServiceResponseStatus.Success)
            {
                string sum = response.Message["Rusult"].ToString();
                await new MessageDialog(sum).ShowAsync();
            }
            else
            { }
        }
    }</pre>
<p>首先我们声明一个App Service连接对象，为App Service的Name赋值为我们设置的AppService.Name，PackageFamilyName我们可以在提供App Service 的App中使用如下code获取。
Debug.WriteLine(Package.Current.Id.FamilyName);
这个FamilyName我们同样可以存放到UWP的公共存储空间中，以方便其他App能够直接获取到。
Ok，我们连接指定Name和FamilyName的App Service，然后开启连接管道，如果连接不成功，可以根据连接状态返回值来提示用户相关信息，如果App Service 未找到，也可以引导用户下载该服务App。
然后我们在点击事件中创建一个ValueSet对象，添加字典数据进去后发送到服务端，然后等待服务端响应。
让我们看下效果：</p>

<p><a href="http://www.liubaicai.net/wp-content/uploads/2015/11/Appservices.gif"><img class="alignnone size-medium wp-image-484" src="http://www.liubaicai.net/wp-content/uploads/2015/11/Appservices-300x197.gif" alt="Appservices" width="300" height="197" /></a></p>

<p>copy from <a href="http://www.wangchenran.com/?p=256">here</a></p>
:ET