I"&<p><a href="http://www.liubaicai.net/wp-content/uploads/2015/11/QQ截图20151116170728.png"><img class="alignnone size-full wp-image-505" src="http://www.liubaicai.net/wp-content/uploads/2015/11/QQ截图20151116170728.png" alt="QQ截图20151116170728" width="284" height="181" /></a></p>
<h3>首先是安装Ruby和DevKit</h3>
<p>windows下可下载对应安装包安装 &lt;a href=”http://rubyinstaller.org/downloads/”&gt;http://rubyinstaller.org/downloads/&lt;/a&gt;</p>

<p>linux下(Debian/Ubuntu) 直接apt-get install ruby ruby-dev</p>
<h3>然后安装相关gem包&lt;/h3&gt;
gem install sinatra
<h3>新建test.rb内容</h3>
<pre class="brush:ruby;">require 'sinatra'
 
get '/' do
  "Hello, World!"
end</pre>
<h3>运行服务器&lt;/h3&gt;
<pre class="brush:bash;">$ ruby app.rb</pre>
在浏览器中输入：localhost:4567，没问题的话就会显示Hello, World!

这段简单的Hello world程序包含了Sinatra程序的三个基本组成部分：
<h4>路由（route）：</h4>
'/' 就是路由。路由可以是单一的路径，或者带有参数的路径（比如 /:name），甚至是正则表达式。对于Sinatra不知道的路由，Sinatra会返回404错误（作为App运行的时候），或者传递给下面的中间件（作为中间件运行的时候）。
<h4>方法（method）：</h4>
get是方法。在Sinatra中，HTTP的四个方法GET/POST/PUT/DELETE都有相应的方法get/post/put/delete。
<h4>处理器（handler）：</h4>
处理器就是最后的代码块，处理器的返回值就是Sinatra返回给客户端（主要是浏览器）的内容。返回值主要以字符串为主，也可以是包含状态码，消息头，消息体的数组。
<h3>添加主页模板</h3>
<pre class="brush:bash;">$ gem install haml #安装haml</pre>
<pre class="brush:ruby;">require 'haml'
get '/' do
  haml :index
end</pre>
在这里&lt;code&gt;haml :index&lt;/code&gt;，就表示使用Haml渲染<code>'views/index.haml'</code>这个模版。

index.haml的样式:
<pre class="brush:xml;">%html
	%head
		%title API
	%body
		%h1 Hello Api
		%p Powered by Ruby on Sinatra</pre>
<h3>添加所需的API接口</h3>
<pre class="brush:ruby;">get '/promoteapp' do
  content_type :json
  'api'
end</pre>
<h3>建立相关类，获取数据库数据&lt;/h3&gt;
<pre class="brush:bash;">gem install mysql2

gem install json</pre>
<pre class="lang:ruby decode:true ">#encoding : UTF-8

require  'mysql2'
require  'json'

class Model
	def initialize (code,msg,data)
		@code = code
		@msg = msg
		@data = data
	end
	
	def to_json
		return Hash[:code =&gt; @code, :msg =&gt; @msg, :data =&gt; @data].to_json
	end
end

client = Mysql2::Client.new(:host =&gt; "localhost", :username =&gt; "test",:password=&gt;"test",:database=&gt;"api_service")
results = client.query("select appid,title,content,logo from promote_app where _status=10");
apps = Array.new
results.each do |row|
	appid = row["appid"]
	title = row["title"]
	content = row["content"]
	logo = row["logo"]
 	apps.push(Hash[:appid =&gt; appid, :title =&gt; title, :content =&gt; content, :logo =&gt; logo])
end
client.close if client
m = Model.new(0,'success',apps)
puts m.to_json</pre>
mysql驱动中文乱码问题严重，于是采用mysql2驱动
<h3>使用“重载”解决“每次重启的麻烦”&lt;/h3&gt;
<pre class="brush:bash;">$ gem install sinatra-contrib</pre>
然后，在“require ‘sinatra/base’”的正后方加入：

<code>require </code><code>'sinatra/reloader'</code>

最后，只需要通过register来声明使用重载（用Thin作服务器不能很好地运行，所以一并设定在WEBrick上）
<pre class="brush:ruby;">class App &lt; Sinatra::Base
  enable :inline_templates
  enable :logging
  set :server, "webrick"
  register Sinatra::Reloader
  #...
end</pre>
想设定为只在development环境中有效也很简单
<pre class="brush:ruby;">configure :development do
  register Sinatra::Reloader
  set :server, "webrick"
end</pre>
这样，就能在运行着Sinatra进程的终端，进行设计变更、逻辑变更等各种修改（追加gem等的情况是需要重启的，这个请注意）
</h3></h3></h3></h3>
:ET